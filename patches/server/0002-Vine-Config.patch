From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 23 Jun 2024 21:01:06 +0800
Subject: [PATCH] Vine Config


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a7ffbbfd2a9fdeae0953ec8753ce48e93ccce086..d7891588cd7dbc9e5f9921cc2f5bf5145678f27e 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -58,6 +58,7 @@ import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.LevelSummary;
 import net.minecraft.world.level.storage.PrimaryLevelData;
+import one.tranic.levelpowered.vine.config.VineConfig;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -121,6 +122,8 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            VineConfig.load(); // Vine - load config
+
             ShreddedPaperConfigurationLoader.init((File) optionset.valueOf("shreddedpaper-settings")); // ShreddedPaper
 
             // Purpur start - load config files early
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d281fe5f75f6f99f869fa3cc8da4f1ff9f96a7bf..a7c3e628762a93803418f462ef57741183345ebc 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,20 +1,14 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
@@ -55,6 +49,7 @@ import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import one.tranic.levelpowered.vine.config.VineConfig;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -63,9 +58,6 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
-import co.aikar.timings.MinecraftTimings; // Paper
-import org.bukkit.craftbukkit.util.TerminalCompletionHandler;
-import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable; // Paper
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -224,6 +216,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.paperConfigurations.initializeGlobalConfiguration(this.registryAccess());
         this.paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
         // Paper end - initialize global and world-defaults configuration
+
+        VineConfig.setCommand();
+
         // Paper start - fix converting txt to json file; convert old users earlier after PlayerList creation but before file load/save
         if (this.convertOldUsers()) {
             this.getProfileCache().save(false); // Paper
diff --git a/src/main/kotlin/one/tranic/levelpowered/vine/commands/VineCfgCommand.kt b/src/main/kotlin/one/tranic/levelpowered/vine/commands/VineCfgCommand.kt
new file mode 100644
index 0000000000000000000000000000000000000000..dd96b107b3208707958735ef059c6b20115cdcad
--- /dev/null
+++ b/src/main/kotlin/one/tranic/levelpowered/vine/commands/VineCfgCommand.kt
@@ -0,0 +1,34 @@
+package one.tranic.levelpowered.vine.commands
+
+import one.tranic.levelpowered.vine.config.VineConfig
+import org.bukkit.command.Command
+import org.bukkit.command.CommandSender
+import net.kyori.adventure.text.Component
+import net.kyori.adventure.text.format.TextColor
+
+class VineCfgCommand : Command("vinecfg") {
+    init {
+        this.permission = "vine.commands.cfg"
+        this.setDescription("Manage config file")
+        this.setUsage("/vinecfg")
+    }
+
+    override fun execute(sender: CommandSender, commandLabel: String, args: Array<String>): Boolean {
+        if (!this.testPermission(sender)) {
+            sender.sendMessage(
+                Component
+                    .text("No permission to execute this command!")
+                    .color(TextColor.color(255, 0, 0))
+            )
+        }
+
+        VineConfig.reload()
+
+        sender.sendMessage(
+            Component
+                .text("Reloaded Vine config file!")
+                .color(TextColor.color(0, 255, 0))
+        )
+        return true
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/levelpowered/vine/config/VineConfig.kt b/src/main/kotlin/one/tranic/levelpowered/vine/config/VineConfig.kt
new file mode 100644
index 0000000000000000000000000000000000000000..70f088f33cae9a6dc5d8f0658aa171af2e99872d
--- /dev/null
+++ b/src/main/kotlin/one/tranic/levelpowered/vine/config/VineConfig.kt
@@ -0,0 +1,83 @@
+package one.tranic.levelpowered.vine.config
+
+import gg.pufferfish.pufferfish.simd.SIMDDetection
+import net.minecraft.server.MinecraftServer
+import one.tranic.levelpowered.vine.commands.VineCfgCommand
+import org.bukkit.Bukkit
+import org.bukkit.configuration.file.YamlConfiguration;
+import java.io.File
+
+object VineConfig {
+    var logger: org.slf4j.Logger = MinecraftServer.LOGGER
+
+    @JvmStatic
+    fun setCommand() {
+        Bukkit.getCommandMap().register("vinecfg", "vine", VineCfgCommand())
+    }
+
+    @JvmStatic
+    fun load() {
+        reload()
+        // Pufferfish start
+        // Attempt to detect vectorization
+        runCatching {
+            SIMDDetection.isEnabled = SIMDDetection.canEnable(logger)
+            SIMDDetection.versionLimited = SIMDDetection.getJavaVersion() < 17
+        }.getOrElse {
+            it.printStackTrace()
+        }
+
+        if (SIMDDetection.isEnabled) {
+            logger.info("SIMD operations detected as functional. Will replace some operations with faster versions.")
+        } else if (SIMDDetection.versionLimited) {
+            logger.warn("Will not enable SIMD! These optimizations are only safely supported on Java 17+.")
+        } else {
+            logger.warn("SIMD operations are available for your server, but are not configured!")
+            logger.warn("To enable additional optimizations, add \"--add-modules=jdk.incubator.vector\" to your startup flags, BEFORE the \"-jar\".")
+            logger.warn("If you have already added this flag, then SIMD operations are not supported on your JVM or CPU.")
+            logger.warn("Debug: Java: " + System.getProperty("java.version") + ", test run: " + SIMDDetection.testRun)
+        }
+    }
+
+    private fun addDefault(configFile: File, configuration: YamlConfiguration) {
+        // Vine: Leaf start
+        configuration.addDefault("leaf.optimize-minecart.enabled", true)
+        configuration.addDefault("leaf.optimize-minecart.skipTickCount", 30)
+        // Vine: Leaf end
+
+        configuration.options().copyDefaults(true)
+        configuration.save(configFile)
+    }
+
+    private fun loadConfigValue(configuration: YamlConfiguration) {
+        // Vine: Leaf start
+        Leaf.OptimizeMinecart.enabled = configuration.getBoolean("leaf.optimize-minecart.enabled")
+        Leaf.OptimizeMinecart.skipTickCount = configuration.getInt("leaf.optimize-minecart.skipTickCount")
+        // Vine: Leaf end
+
+    }
+
+    @JvmStatic
+    fun reload() {
+        runCatching {
+            val configFile = File("vine.yml")
+            if (!configFile.exists()) {
+                configFile.createNewFile()
+            }
+            val configuration = YamlConfiguration.loadConfiguration(configFile)
+            addDefault(configFile, configuration)
+            loadConfigValue(configuration)
+        }.getOrElse {
+            throw RuntimeException(it)
+        }
+    }
+
+    object Leaf {
+        object OptimizeMinecart {
+            @JvmField
+            var enabled: Boolean = true
+            @JvmField
+            var skipTickCount: Int = 30
+        }
+    }
+}
\ No newline at end of file

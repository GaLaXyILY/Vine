From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 404Setup <153366651+404Setup@users.noreply.github.com>
Date: Sun, 23 Jun 2024 21:01:06 +0800
Subject: [PATCH] Vine Config


diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
index efed51a692d94acd9126f6eb2866755567c2e636..f632242b5f705c098af9f733f4d37bd1693f6163 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishConfig.java
@@ -5,8 +5,8 @@ import java.io.IOException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.List;
+
 import net.minecraft.server.MinecraftServer;
-import org.apache.logging.log4j.Level;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.MemoryConfiguration;
 import org.jetbrains.annotations.Nullable;
@@ -15,10 +15,9 @@ import org.simpleyaml.configuration.file.YamlFile;
 import org.simpleyaml.exceptions.InvalidConfigurationException;
 
 public class PufferfishConfig {
-	
 	private static final YamlFile config = new YamlFile();
 	private static int updates = 0;
-	
+
 	private static ConfigurationSection convertToBukkit(org.simpleyaml.configuration.ConfigurationSection section) {
 		ConfigurationSection newSection = new MemoryConfiguration();
 		for (String key : section.getKeys(false)) {
@@ -30,15 +29,7 @@ public class PufferfishConfig {
 		}
 		return newSection;
 	}
-	
-	public static ConfigurationSection getConfigCopy() {
-		return convertToBukkit(config);
-	}
-	
-	public static int getUpdates() {
-		return updates;
-	}
-	
+
 	public static void load() throws IOException {
 		File configFile = new File("pufferfish.yml");
 		
@@ -64,7 +55,7 @@ public class PufferfishConfig {
 				try {
 					method.invoke(null);
 				} catch (Throwable t) {
-					MinecraftServer.LOGGER.warn("Failed to load configuration option from " + method.getName(), t);
+                    MinecraftServer.LOGGER.warn("Failed to load configuration option from {}", method.getName(), t);
 				}
 			}
 		}
@@ -73,60 +64,68 @@ public class PufferfishConfig {
 		
 		config.save(configFile);
 	}
-	
+
+	public static ConfigurationSection getConfigCopy() {
+		return convertToBukkit(config);
+	}
+
+	public static int getUpdates() {
+		return updates;
+	}
+
 	private static void setComment(String key, String... comment) {
 		if (config.contains(key)) {
 			config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
 		}
 	}
-	
+
 	private static void ensureDefault(String key, Object defaultValue, String... comment) {
 		if (!config.contains(key)) {
 			config.set(key, defaultValue);
 			config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
 		}
 	}
-	
+
 	private static boolean getBoolean(String key, boolean defaultValue, String... comment) {
 		return getBoolean(key, null, defaultValue, comment);
 	}
-	
+
 	private static boolean getBoolean(String key, @Nullable String oldKey, boolean defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getBoolean(key, defaultValue);
 	}
-	
+
 	private static int getInt(String key, int defaultValue, String... comment) {
 		return getInt(key, null, defaultValue, comment);
 	}
-	
+
 	private static int getInt(String key, @Nullable String oldKey, int defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getInt(key, defaultValue);
 	}
-	
+
 	private static double getDouble(String key, double defaultValue, String... comment) {
 		return getDouble(key, null, defaultValue, comment);
 	}
-	
+
 	private static double getDouble(String key, @Nullable String oldKey, double defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getDouble(key, defaultValue);
 	}
-	
+
 	private static String getString(String key, String defaultValue, String... comment) {
 		return getOldString(key, null, defaultValue, comment);
 	}
-	
+
 	private static String getOldString(String key, @Nullable String oldKey, String defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getString(key, defaultValue);
 	}
-	
+
 	private static List<String> getStringList(String key, List<String> defaultValue, String... comment) {
 		return getStringList(key, null, defaultValue, comment);
 	}
-	
+
 	private static List<String> getStringList(String key, @Nullable String oldKey, List<String> defaultValue, String... comment) {
 		ensureDefault(key, defaultValue, comment);
 		return config.getStringList(key);
@@ -148,5 +147,14 @@ public class PufferfishConfig {
 			enableAsyncMobSpawning = temp;
 		}
 	}
+
+	public static boolean enableSuffocationOptimization;
+	private static void suffocationOptimization() {
+		enableSuffocationOptimization = getBoolean("enable-suffocation-optimization", true,
+				"Optimizes the suffocation check by selectively skipping",
+				"the check in a way that still appears vanilla. This should",
+				"be left enabled on most servers, but is provided as a",
+				"configuration option if the vanilla deviation is undesirable.");
+	}
 	
 }
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a7ffbbfd2a9fdeae0953ec8753ce48e93ccce086..d7891588cd7dbc9e5f9921cc2f5bf5145678f27e 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -58,6 +58,7 @@ import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.LevelSummary;
 import net.minecraft.world.level.storage.PrimaryLevelData;
+import one.tranic.levelpowered.vine.config.VineConfig;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -121,6 +122,8 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            VineConfig.load(); // Vine - load config
+
             ShreddedPaperConfigurationLoader.init((File) optionset.valueOf("shreddedpaper-settings")); // ShreddedPaper
 
             // Purpur start - load config files early
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d281fe5f75f6f99f869fa3cc8da4f1ff9f96a7bf..a7c3e628762a93803418f462ef57741183345ebc 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,20 +1,14 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
@@ -55,6 +49,7 @@ import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import one.tranic.levelpowered.vine.config.VineConfig;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -63,9 +58,6 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
-import co.aikar.timings.MinecraftTimings; // Paper
-import org.bukkit.craftbukkit.util.TerminalCompletionHandler;
-import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable; // Paper
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -224,6 +216,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.paperConfigurations.initializeGlobalConfiguration(this.registryAccess());
         this.paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
         // Paper end - initialize global and world-defaults configuration
+
+        VineConfig.setCommand();
+
         // Paper start - fix converting txt to json file; convert old users earlier after PlayerList creation but before file load/save
         if (this.convertOldUsers()) {
             this.getProfileCache().save(false); // Paper
diff --git a/src/main/kotlin/one/tranic/levelpowered/vine/commands/VineCfgCommand.kt b/src/main/kotlin/one/tranic/levelpowered/vine/commands/VineCfgCommand.kt
new file mode 100644
index 0000000000000000000000000000000000000000..dd96b107b3208707958735ef059c6b20115cdcad
--- /dev/null
+++ b/src/main/kotlin/one/tranic/levelpowered/vine/commands/VineCfgCommand.kt
@@ -0,0 +1,34 @@
+package one.tranic.levelpowered.vine.commands
+
+import one.tranic.levelpowered.vine.config.VineConfig
+import org.bukkit.command.Command
+import org.bukkit.command.CommandSender
+import net.kyori.adventure.text.Component
+import net.kyori.adventure.text.format.TextColor
+
+class VineCfgCommand : Command("vinecfg") {
+    init {
+        this.permission = "vine.commands.cfg"
+        this.setDescription("Manage config file")
+        this.setUsage("/vinecfg")
+    }
+
+    override fun execute(sender: CommandSender, commandLabel: String, args: Array<String>): Boolean {
+        if (!this.testPermission(sender)) {
+            sender.sendMessage(
+                Component
+                    .text("No permission to execute this command!")
+                    .color(TextColor.color(255, 0, 0))
+            )
+        }
+
+        VineConfig.reload()
+
+        sender.sendMessage(
+            Component
+                .text("Reloaded Vine config file!")
+                .color(TextColor.color(0, 255, 0))
+        )
+        return true
+    }
+}
\ No newline at end of file
diff --git a/src/main/kotlin/one/tranic/levelpowered/vine/config/VineConfig.kt b/src/main/kotlin/one/tranic/levelpowered/vine/config/VineConfig.kt
new file mode 100644
index 0000000000000000000000000000000000000000..c34cb782860c1c0ed8f213a3e813da3b1b962724
--- /dev/null
+++ b/src/main/kotlin/one/tranic/levelpowered/vine/config/VineConfig.kt
@@ -0,0 +1,242 @@
+package one.tranic.levelpowered.vine.config
+
+import gg.pufferfish.pufferfish.PufferfishConfig
+import gg.pufferfish.pufferfish.simd.SIMDDetection
+import net.minecraft.server.MinecraftServer
+import one.tranic.levelpowered.vine.commands.VineCfgCommand
+import org.bukkit.Bukkit
+import org.bukkit.configuration.MemoryConfiguration
+import org.simpleyaml.configuration.ConfigurationSection
+import org.simpleyaml.configuration.comments.CommentType
+import org.simpleyaml.configuration.file.YamlFile
+import org.simpleyaml.exceptions.InvalidConfigurationException
+import java.io.File
+import java.io.IOException
+import java.lang.reflect.Modifier
+
+object VineConfig {
+    var logger: org.slf4j.Logger = MinecraftServer.LOGGER
+    private val config: YamlFile = YamlFile()
+    private var updates: Int = 0
+
+    private fun convertToBukkit(section: ConfigurationSection): org.bukkit.configuration.ConfigurationSection {
+        val newSection: org.bukkit.configuration.ConfigurationSection = MemoryConfiguration()
+        for (key in section.getKeys(false)) {
+            if (section.isConfigurationSection(key)) {
+                newSection[key!!] = convertToBukkit(section.getConfigurationSection(key))
+            } else {
+                newSection[key!!] = section[key]
+            }
+        }
+        return newSection
+    }
+
+    @JvmStatic
+    fun setCommand() {
+        Bukkit.getCommandMap().register("vinecfg", "vine", VineCfgCommand())
+    }
+
+    @JvmStatic
+    fun load() {
+        reload()
+        // Pufferfish start
+        // Attempt to detect vectorization
+        runCatching {
+            SIMDDetection.isEnabled = SIMDDetection.canEnable(logger)
+            SIMDDetection.versionLimited = SIMDDetection.getJavaVersion() < 17
+        }.getOrElse {
+            it.printStackTrace()
+        }
+
+        if (SIMDDetection.isEnabled) {
+            logger.info("SIMD operations detected as functional. Will replace some operations with faster versions.")
+        } else if (SIMDDetection.versionLimited) {
+            logger.warn("Will not enable SIMD! These optimizations are only safely supported on Java 17+.")
+        } else {
+            logger.warn("SIMD operations are available for your server, but are not configured!")
+            logger.warn("To enable additional optimizations, add \"--add-modules=jdk.incubator.vector\" to your startup flags, BEFORE the \"-jar\".")
+            logger.warn("If you have already added this flag, then SIMD operations are not supported on your JVM or CPU.")
+            logger.warn("Debug: Java: ${System.getProperty("java.version")} test run: ${SIMDDetection.testRun}")
+        }
+    }
+
+    @JvmStatic
+    fun reload() {
+        runCatching {
+            val configFile = File("vine.yml")
+
+            if (configFile.exists()) {
+                try {
+                    config.load(configFile)
+                } catch (e: InvalidConfigurationException) {
+                    throw IOException(e)
+                }
+            }
+
+            getString(
+                "info.version",
+                "1.0",
+                "empty"
+            )
+            setComment(
+                "info",
+                "Vine Abstract Configuration\nVine Github: https://github.com/LevelTranic/Vine"
+            )
+
+            for (method in VineConfig::class.java.declaredMethods) {
+                if (Modifier.isStatic(method.modifiers) && Modifier.isPrivate(method.modifiers) && method.parameterCount == 0 && method.returnType == Void.TYPE && !method.name.startsWith(
+                        "lambda"
+                    )
+                ) {
+                    method.isAccessible = true
+                    try {
+                        method.invoke(null)
+                    } catch (t: Throwable) {
+                        MinecraftServer.LOGGER.warn("Failed to load configuration option from {}", method.name, t)
+                    }
+                }
+            }
+
+            updates++
+
+            config.save(configFile)
+        }.getOrElse {
+            throw RuntimeException(it)
+        }
+    }
+
+    // Pufferfish start
+    @JvmStatic
+    fun getConfigCopy(): org.bukkit.configuration.ConfigurationSection {
+        return convertToBukkit(config)
+    }
+
+    @JvmStatic
+    fun getUpdates(): Int {
+        return updates
+    }
+
+    private fun setComment(key: String, vararg comment: String) {
+        if (config.contains(key)) {
+            config.setComment(key, java.lang.String.join("\n", *comment), CommentType.BLOCK)
+        }
+    }
+
+    private fun ensureDefault(key: String, defaultValue: Any, vararg comment: String) {
+        if (!config.contains(key)) {
+            config[key] = defaultValue
+            config.setComment(key, java.lang.String.join("\n", *comment), CommentType.BLOCK)
+        }
+    }
+
+    private fun getBoolean(key: String, defaultValue: Boolean, vararg comment: String): Boolean {
+        return getBoolean(key, null, defaultValue, *comment)
+    }
+
+    private fun getBoolean(key: String, oldKey: String?, defaultValue: Boolean, vararg comment: String): Boolean {
+        ensureDefault(key, defaultValue, *comment)
+        return config.getBoolean(key, defaultValue)
+    }
+
+    private fun getInt(key: String, defaultValue: Int, vararg comment: String): Int {
+        return getInt(key, null, defaultValue, *comment)
+    }
+
+    private fun getInt(key: String, oldKey: String?, defaultValue: Int, vararg comment: String): Int {
+        ensureDefault(key, defaultValue, *comment)
+        return config.getInt(key, defaultValue)
+    }
+
+    private fun getDouble(key: String, defaultValue: Double, vararg comment: String): Double {
+        return getDouble(key, null, defaultValue, *comment)
+    }
+
+    private fun getDouble(key: String, oldKey: String?, defaultValue: Double, vararg comment: String): Double {
+        ensureDefault(key, defaultValue, *comment)
+        return config.getDouble(key, defaultValue)
+    }
+
+    private fun getString(key: String, defaultValue: String, vararg comment: String): String {
+        return getOldString(key, null, defaultValue, *comment)
+    }
+
+    private fun getOldString(key: String, oldKey: String?, defaultValue: String, vararg comment: String): String {
+        ensureDefault(key, defaultValue, *comment)
+        return config.getString(key, defaultValue)
+    }
+
+    private fun getStringList(key: String, defaultValue: List<String>, vararg comment: String): List<String> {
+        return getStringList(key, null, defaultValue, *comment)
+    }
+
+    private fun getStringList(
+        key: String,
+        oldKey: String?,
+        defaultValue: List<String>,
+        vararg comment: String
+    ): List<String> {
+        ensureDefault(key, defaultValue, *comment)
+        return config.getStringList(key)
+    }
+    // Pufferfish end
+
+    object Leaf {
+        object OptimizeMinecart {
+            @JvmField
+            var enabled: Boolean = true
+
+            @JvmField
+            var skipTickCount: Int = 30
+        }
+    }
+
+    @JvmStatic
+    private fun leaf() {
+        Leaf.OptimizeMinecart.enabled = getBoolean(
+            "leaf.optimize-minecart.enabled",
+            true,
+            """
+            Enable this feature to handle large amount of stacked Minecart better.
+            By skipping tick collisions to reduce expense getting entities list
+            and bukkit event calls, useful for the anarchy server.
+            """
+        )
+        Leaf.OptimizeMinecart.skipTickCount = getInt(
+            "leaf.optimize-minecart.skipTickCount",
+            30,
+            "default: 30"
+        )
+    }
+
+    object Mobtimizations {
+        @JvmField
+        var optimizationMobRePathfinding = true
+
+        @JvmField
+        var optimizationZombieSearchAndDestroyTurtleEgg = false
+
+        @JvmField
+        var zombieSearchAndDestroyTurtleEggPercentChance = 40
+    }
+
+    @JvmStatic
+    private fun mobtimizations() {
+        Mobtimizations.optimizationMobRePathfinding = getBoolean(
+            "mobtimizations.optimizationMobRePathfinding",
+            true,
+            "If true, disables the frequent pathfinds done while already following a path"
+        )
+
+        Mobtimizations.optimizationZombieSearchAndDestroyTurtleEgg = getBoolean(
+            "mobtimizations.optimizationZombieSearchAndDestroyTurtleEgg",
+            false,
+            "If true, optimizes the expensive searching done to find a turtle egg to crush, for zombies/husks, by default fully disabling it"
+        )
+
+        Mobtimizations.zombieSearchAndDestroyTurtleEggPercentChance = getInt(
+            "mobtimizations.zombieSearchAndDestroyTurtleEggPercentChance",
+            40,
+            "Percent chance to run for task: zombie seeking turtle eggs to destroy"
+        )
+    }
+}
\ No newline at end of file
